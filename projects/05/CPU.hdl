// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=AInst);
    Not(in=AInst, out=CInst);

    // Need to load A and M register?
    Mux16(a=ALUop, b=instruction, sel=AInst, out=AregIn);
    And(a=CInst, b=instruction[5], out=o1);
    Or(a=o1, b=AInst, out=loadA);
    ARegister(in=AregIn, load=loadA, out=AregOut, out[0..14]=addressM);
    And(a=CInst, b=instruction[3], out=writeM);

    // Need to load D register?
    Mux16(a=AregOut, b=inM, sel=instruction[12], out=ALUy);
    And(a=CInst, b=instruction[4], out=loadD);
    DRegister(in=ALUop, load=loadD, out=ALUx);
	
    ALU(x=ALUx, y=ALUy, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUop, out=outM, zr=ZRout, ng=NGout);

    // Program counter handling
    // instruction[0] -> Jump if positive
    // instruction[1] -> Jump if zero
    // instruction[2] -> Jump if negative
    Not(in=NGout, out=Pos);
    Not(in=ZRout, out=NoZero);
    And(a=instruction[0], b=Pos, out=Pos1);
    And(a=Pos1, b=NoZero, out=JPos);
    And(a=instruction[1], b=ZRout, out=JZ);
    And(a=instruction[2], b=NGout, out=JNeg);
    Or(a=JPos, b=JZ, out=J1);
    Or(a=J1, b=JNeg, out=J2);
    And(a=CInst, b=J2, out=JMP);
    Not(in=JMP, out=NOJMP);
    PC(in=AregOut, load=JMP, reset=reset, inc=NOJMP, out[0..14]=pc);
}
